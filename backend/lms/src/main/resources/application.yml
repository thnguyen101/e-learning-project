scheme: http
hostname: localhost
reverse-proxy-uri: ${scheme}://${hostname}

keycloak-host: ${reverse-proxy-uri}/auth
keycloak-realm: keycloak101
oauth2-issuer: ${keycloak-host}/realms/${keycloak-realm}
oauth2-client-id: bff-client
oauth2-client-secret: s3cr3t

s3-access-key: ${S3_ACCESS_KEY}
s3-secret-key: ${S3_SECRET_KEY}
s3-endpoint: ${S3_ENDPOINT}
s3-bucket-name: ${S3_BUCKET_NAME}

stripe-secret-key: ${STRIPE_SECRET_KEY}

server:
  port: 7084
  shutdown: graceful
  tomcat:
    threads:
      min-spare: 5
      max: 50
    keep-alive-timeout: 15s
    connection-timeout: 2s

spring:
  application:
    name: lms
  servlet:
    multipart:
      max-file-size: -1
      max-request-size: -1
  datasource:
    url: jdbc:postgresql://localhost:5432/lms
    username: postgres
    password: secret
    hikari:
      connection-timeout: 2000 #ms
      maximum-pool-size: 20
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${oauth2-issuer}
  modulith:
    events:
      jdbc:
        schema-initialization:
          enabled: true
    republish-outstanding-events-on-restart: true

management:
  endpoint:
    health:
      probes:
        enabled: true
  endpoints:
    web:
      exposure:
        include: '*'
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true

error:
  handling:
    exception-logging: no_logging
    http-status-in-json-response: true
    full-stacktrace-http-statuses: 5xx
    log-levels:
      5xx: ERROR
